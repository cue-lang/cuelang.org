{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "991ddfe7_c747e292",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1021694
      },
      "writtenOn": "2024-04-05T17:20:42Z",
      "side": 1,
      "message": "PTAL and see what Go example makes sense for the guide\u0027s final section.",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b22d397_cfbdeff7",
        "filename": "content/docs/concept/how-cue-works-with-openapi/en.md",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-04-28T07:43:50Z",
      "side": 1,
      "message": "I don\u0027t understand this paragraph.",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0b7e0e1_0e620f15",
        "filename": "content/docs/concept/how-cue-works-with-openapi/en.md",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1021694
      },
      "writtenOn": "2024-05-02T17:13:10Z",
      "side": 1,
      "message": "What I\u0027m trying to communicate is that, because OpenAPI is \"just\" data, and CUE can validate and emit data, it\u0027s possible to construct CUE to emit or validate entirely arbitrary OpenAPI schemas.\n\nBy including this, I\u0027m trying to give the user who comes across unsupported OpenAPI features (e.g. things that don\u0027t just live under the `components.schemas` path) the surety of knowing that they can use CUE, no matter what, to generate and validate their OpenAPI schema. They just don\u0027t get the benefit of using the underlying OpenAPI schema **as** a schema, inside CUE.\n\nI\u0027m not currently sure how to word this differently, but I\u0027ll think on it. Any ideas you had would be gratefully received!",
      "parentUuid": "1b22d397_cfbdeff7",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac5755a_f78470d5",
        "filename": "content/docs/concept/how-cue-works-with-openapi/en.md",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-05-03T04:28:09Z",
      "side": 1,
      "message": "I\u0027m afraid I still don\u0027t get the point. \n\nWhat are the \"unsupported OpenAPI features\" we are talking about here? That seems key to your motivation. \n\n\u003e the surety of knowing that they can use CUE, no matter what, to generate and validate their OpenAPI schema\n\nI\u0027m not sure how if they are \"not supported\" they can be validated?\n\nUnless this is a reference to the fact that there is an OpenAPI JSON schema for validating OpenAPI schemas? \n\nLet\u0027s discuss in any case - that might help move my understanding forward.",
      "parentUuid": "c0b7e0e1_0e620f15",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b323112_12aca35b",
        "filename": "content/docs/concept/how-cue-works-with-openapi/en.md",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1021694
      },
      "writtenOn": "2024-05-07T17:20:13Z",
      "side": 1,
      "message": "[Following our offline discussion last week]\n\nToday @mvdan@mvdan.cc and I discussed what we could do to best serve the reader who approaches this page with OpenAPI knowledge and requirements, but little CUE awareness.\n\nWe agreed that adding any significant detail around the specific ways in which OpenAPI\u0027s top-level fields (https://swagger.io/specification/#fixed-fields) aren\u0027t yet dealt with by `cue import` isn\u0027t the way forward, as any such feature matrix would become outdated relatively soon, given the adapter work.\n\nWe concluded that:\n\n1. I\u0027ll open an issue asking the project to consider what it wants to achieve in terms of round-trip-ability for OpenAPI\u0027s top-level fields. Even if they\u0027re less likely to become meaningful from a CUE perspective (e.g. the `servers` or `externalDocs` fields), they might be addressed by simply being export/import-able by the encoder.\n2. `How CUE works with OpenAPI` should be constructed solely out of CUE\u0027s currently-available OpenAPI-related capabilities, with a source-level TODO mentioning @mvdan@mvdan.cc\u0027s upcoming adapter work. This page *won\u0027t* link to the issue opened in \\#1, as it felt odd to both of us to link from a more marketing-related page to an open issue asking the project to decide how much (more) of OpenAPI it would like to support.\n3. As an exception to \\#2, I\u0027ll insert some simpler wording to express that any OpenAPI document can be generated by CUE, given that it\u0027s \"just data\", with mention of specific fields (e.g. `servers`) that are very obviously **not** schema-related.\n4. [my solo conclusion, not discussed] After @mvdan@mvdan.cc\u0027s adapter work has had its first meaninful pass over OpenAPI, we\u0027ll revisit this page and choose which missing capabilities we call out as being \"future plans\"/etc.\n5. I\u0027ll open an issue tracking the need for a cross-encoder feature matrix, and add a TODO to this page to link to it.\n\n@mvdan@mvdan.cc do you feel I\u0027ve captured our chat and conclusions accurately?\n\n@paul@myitcv.io does this approach sound reasonable? I feel it\u0027s likely that we\u0027ll want to copy this approach for `How CUE works with JSON Schema` (modulo CUE\u0027s different capabilities).",
      "parentUuid": "dac5755a_f78470d5",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de9c5ca7_6623158c",
        "filename": "content/docs/concept/how-cue-works-with-openapi/en.md",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-08T07:34:41Z",
      "side": 1,
      "message": "SGTM. Just want to re-emphasize that I haven\u0027t looked closely at jsonschema and openapi yet, so my thinking on the contents of this doc might change over time.",
      "parentUuid": "3b323112_12aca35b",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbf1c952_7edcbcdc",
        "filename": "content/docs/concept/how-cue-works-with-openapi/en.md",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-05-08T13:17:25Z",
      "side": 1,
      "message": "\u003e As an exception to #2, I\u0027ll insert some simpler wording to express that any OpenAPI document can be generated by CUE, given that it\u0027s \"just data\", with mention of specific fields (e.g. servers) that are very obviously not schema-related.\n\nI\u0027m still of the opinion that this \"just data\" wording is misleading/confusing. As we previously discussed, what the user cares about is the extent to which their OpenAPI specification/declaration (whatever word is correct in that situation) can be represented in CUE as a first-class citizen, and correspondingly the extent to which a CUE representation can then be \"returned\" to the JSON representation. It\u0027s not clear to me that the user will think of what they are doing with OpenAPI as \"just data\", even if that consideration were limited to only the non-\"schema\" part of their OpenAPI specification/declaration. Again, just because the encoding of OpenAPI is JSON doesn\u0027t really help here: I could import an entire OpenAPI specification/declaration as JSON, manage that in CUE and \"be done\". It\u0027s \"just data\" by that metric. But the focus of this document is first class support for OpenAPI. So referring to it as \"just data\" doesn\u0027t fit to my mind. Instead, I think we should focus the language on making clear to what extent CUE supports OpenAPI as a first-class citizen, and documenting/linking to where it does not, or where we plan to improve it. As a workaround, if people want to unify in the \"missing parts\" then fine. But that should live elsewhere.",
      "parentUuid": "de9c5ca7_6623158c",
      "revId": "27fe36e65d05a4d7fed56ffbab7dc62aa7771bd2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}