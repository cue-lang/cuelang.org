# Ensure that preprocessor comparators work.

unquote content/dir/en.md

# Run the preprocessor
exec preprocessor execute --debug=all

# Make a copy of the cache file written to disk
cp content/dir/gen_cache.cue content/dir/gen_cache.cue.copy

# Run the preprocessor again and ensure we have a cache hit
exec preprocessor execute --debug=all
stderr $WORK${/}'content'${/}'dir'${/}'en.md: cache hit for multi-step script; not running'

# Verify that the gen_cache.cue is unchanged from the original copy of gen_cache.cue
cmp content/dir/gen_cache.cue content/dir/gen_cache.cue.copy

# Run the preprocessor again and intentionally skip the cache
exec preprocessor execute --debug=all --skipcache
stderr $WORK${/}'content'${/}'dir'${/}'en.md: skipping cache for multi-step script; was a hit'

# Verify that the gen_cache.cue is unchanged from the original copy of gen_cache.cue
cmp content/dir/gen_cache.cue content/dir/gen_cache.cue.copy

-- hugo/.keep --
-- site.cue --
package site

import "strings"

versions: cue: [x=string]: var: "CUELANG_CUE_\(strings.ToUpper(x))"

versions: cue: default: v: "v0.9.0-alpha.3"
-- content/dir/page.cue --
package site

content: dir: page: {
	leftDelim:  "{{{"
	rightDelim: "}}}"

	comparators: [
		{
			kind:    "patternComparator"
			command: "go test"
			pattern: expr: #"(?m)^ok .*\t(\d(\.\d+)?)s"#
		},
		{
			kind:    "unstableLineOrderComparator"
			command: "go test"
		},
	]
}
-- content/dir/en.md --
>---
>title: JSON Superset
>---
>{{{with script "en" "go mod init"}}}
>go mod init test
>{{{end}}}
>{{{with upload "en" "go test code"}}}
>-- main_test.go --
>package main
>
>import (
>	"fmt"
>	"math/rand"
>	"strings"
>	"testing"
>	"time"
>)
>
>func TestRand(t *testing.T) {
>	time.Sleep(time.Duration(rand.Int63n(10)) * time.Millisecond)
>	words := strings.Fields("ink runs from the corners of my mouth")
>	rand.Shuffle(len(words), func(i, j int) {
>		words[i], words[j] = words[j], words[i]
>	})
>	fmt.Printf("%s\n", strings.Join(words, "\n"))
>}
>{{{end}}}
>{{{with script "en" "go test"}}}
>go test
>{{{end}}}
