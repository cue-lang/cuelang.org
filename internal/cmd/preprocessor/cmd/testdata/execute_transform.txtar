# Ensure that preprocessor understands the various forms of text/template
# shorthand that we use.

unquote content/dir/en.md

# Make a golden file of the input to ensure it is written back intact
cp content/dir/en.md content/dir/en.md.golden

# Run the preprocessor
exec preprocessor execute --debug=all

# Assert there was no cache hit
stderr $WORK${/}'content'${/}'dir'${/}'en.md: cache miss for dir.cache.sidebyside."json-superset"'

# Assert on the directory structure left behind
exec cmd-find
cmp stdout structure.golden

# Copy the resulting soure file sideways and use that in comparison
# so that we don't inadvertently update it when using CUE_UPDATE=1
cp content/dir/en.md content/dir/en.md.writeBack

# Verify that the source file is intact
cmp content/dir/en.md.writeBack content/dir/en.md.golden

# Verify that the target files matche the source contents
cmp hugo/content/en/dir/index.md hugo/content/en/dir/index.md.golden

# Re-run the preprocessor and ensure we have a cache hit
exec preprocessor execute --debug=all
stderr $WORK${/}'content'${/}'dir'${/}'en.md: cache hit for dir.cache.sidebyside."json-superset"; not running'

# Re-run the preprocessor again with --skipcache to ensure we re-run a cache hit
exec preprocessor execute --debug=all --skipcache
stderr $WORK${/}'content'${/}'dir'${/}'en.md: skipping cache for dir.cache.sidebyside."json-superset"; was a hit'

-- content/dir/site.cue --
package site
-- content/dir/en.md --
>---
>title: JSON Superset
>---
>
>Some text before
>
>{{{with step}}}
>{{{with sidebyside "en" "json-superset"}}}
>exec cue export in.cue
>cmp stdout stdout.json
>-- in.cue --
>// A doc comment
>map: {
>	member1: 3 // a line comment
>	member2: 4
>}
>-- stdout.json --
>{
>    "map": {
>        "member1": 3,
>        "member2": 4
>    }
>}
>{{{end}}}
>{{{end}}}
>
>{{{with step}}}
>some text
>{{{end}}}
>
>Some text after
>
-- hugo/content/en/dir/index.md.golden --
---
title: JSON Superset
---

Some text before

{{< step stepNumber="1" >}}
{{< code-tabs >}}
{{< code-tab name="in.cue" language="text"  area="top-left" >}}
// A doc comment
map: {
	member1: 3 // a line comment
	member2: 4
}
{{< /code-tab >}}
{{< code-tab name="TERMINAL" language="json" type="terminal" area="top-right" >}}
{
    "map": {
        "member1": 3,
        "member2": 4
    }
}
{{< /code-tab >}}
{{< /code-tabs >}}
{{< /step >}}

{{< step stepNumber="2" >}}
some text
{{< /step >}}

Some text after

-- structure.golden --
content/dir/en.md
content/dir/gen_cache.cue
content/dir/site.cue
hugo/content/en/dir/index.md
