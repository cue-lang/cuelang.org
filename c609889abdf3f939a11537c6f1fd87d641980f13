{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b73775ed_378d45f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1021694
      },
      "writtenOn": "2024-11-25T13:27:23Z",
      "side": 1,
      "message": "@paul@myitcv.io PTAL.",
      "revId": "c609889abdf3f939a11537c6f1fd87d641980f13",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a099c28_07a89ec4",
        "filename": "content/docs/concept/working-with-incomplete-cue/en.md",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-11-25T13:42:02Z",
      "side": 1,
      "message": "I\u0027m not fond of this example, because it only doesn\u0027t error because of a feature that users may not have realised.\n\nIf you change the example to:\n\n```\nA: x: 2\nB: A.x + C + 100\n```\n\nthen you can\u0027t eval this. You get `reference \"C\" not found`. What\u0027s different? It\u0027s just another undefined field right?\n\nIf we turn A into a definition:\n\n```\n#A: x: 2\nB: #A.x + #A.y + 100\n```\n\nthen it also doesn\u0027t work. Sadly, you get exactly a rather unhelpful error message: `undefined field: y`\n\nThe thing is, in the case of the original, the `A.o` doesn\u0027t error because for open structs, essentially you have an implicit pattern constraint `[string]: _`. Given `A` can be resolved, it then follows that `A.o` resolves to top, which doesn\u0027t error.\n\nIn the `C` case, well `C` can\u0027t be resolved at all, and although the top level package scope should behave like an open struct, name resolution doesn\u0027t default to any particular lexical scope.\n\nIn the definition case, the struct is closed, so that implicit `[string]: _` is gone, and so the field can\u0027t be found.\n\nAll of which is to say that I think this example, to me, suggests a general behaviour when it comes to unknown fields/variables that personally I think I would probably like, but is not consistent with how CUE behaves.\n\nWhat I think I would prefer to see would be an explicit top. So something like:\n\n```\nA: x: 2\nA: o: _\nB: A.x + A.o + 100\n```\n\nThis sidesteps needing to reason about whether the struct is open or closed, and the details of identifier resolution, but keeps the fact that we can\u0027t do maths involving top, and so illustrates your point about incomplete data.",
      "revId": "c609889abdf3f939a11537c6f1fd87d641980f13",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}