{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1c5b0038_c6f1d4f5",
        "filename": "internal/cmd/preprocessor/cmd/bufferederrorcontext.go",
        "patchSetId": 29
      },
      "lineNbr": 50,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "nit: this is not a \"set\", because I would expect `set(false)` to actually set the field to false. perhaps `addInError`, since you \"add\" the booleans by ORing them? or `updateInError`.",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32c4ed73_677fcecb",
        "filename": "internal/cmd/preprocessor/cmd/bufferederrorcontext.go",
        "patchSetId": 29
      },
      "lineNbr": 65,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "I know this code already existed elsewhere, but it still puzzles me that you\u0027re doing an Sprintf, then a string addition, then the final write.\n\nhow about something like:\n\n```\nfmt.Fprintf(\u0026e.log, format, args...)\nif !bytes.HasSuffix(e.log.Bytes(), []byte(\"\\n\")) {\n    e.log.WriteByte(\u0027\\n\u0027)\n}\n```\n\nan alternative would be to be consistent about including or excluding the newline in the logf calls.\n\nThese also apply to the other interface implementations, I think.",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4446036f_536cfc52",
        "filename": "internal/cmd/preprocessor/cmd/bufferederrorcontext.go",
        "patchSetId": 29
      },
      "lineNbr": 72,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "another case where the \"double printf\" puzzles me :)",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa3d26f_b38e6e20",
        "filename": "internal/cmd/preprocessor/cmd/bufferederrorcontext.go",
        "patchSetId": 29
      },
      "lineNbr": 85,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "another case where the \"double printf\" puzzles me :)",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ffd3bdd_48629462",
        "filename": "internal/cmd/preprocessor/cmd/errorcontext.go",
        "patchSetId": 29
      },
      "lineNbr": 47,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "nit: this convenience need not be in the interface, because all implementations do exactly the same based on isInError.",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40e322fe_bdfff19e",
        "filename": "internal/cmd/preprocessor/cmd/nodes.go",
        "patchSetId": 29
      },
      "lineNbr": 59,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "FYI: I personally tend to avoid pointers when embedding, unless I mean to do something funky like sharing the same embedded value between multiple \"parent\" values. Otherwise more pointers just mean you\u0027re jumping around memory unnecessarily, which can add up if you call methods very often.",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d662cd_f5215cd1",
        "filename": "internal/cmd/preprocessor/cmd/rootfile.go",
        "patchSetId": 29
      },
      "lineNbr": 135,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-05-26T08:29:45Z",
      "side": 1,
      "message": "these bits of code can also just be:\n\n```\nif err :\u003d errorIfInError(rf); err !\u003d nil {\n    return err\n}\n```\n\n(with my suggestion to move the func out of the interface)",
      "revId": "5ba86730050706238219e570a5682ef1fe642788",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}