#!/usr/bin/env bash

set -euxo pipefail

# cd to the parent directory to that containing the script
cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/.."


cd internal/cmd/preprocessor/cmd
tag="preprocessor:$(cat _docker/Dockerfile _docker/entrypoint.sh | sha256sum | awk '{print $1}')"
cat <<EOD > gen_dockerimagetag.go
// Code generated by buildDockerImage.bash; DO NOT EDIT.

package cmd

const dockerImageTag = "$tag"
EOD

caching=""
if [ "${CI:-}" == "true" ]
then
	# On macOS, for some reason we get issues if the cache does not properly
	# exist and we try to read from it.
	caching="--cache-to=type=local,dest=$HOME/.cache/dockercache"
	if [ -f ~/.cache/dockercache/index.json ]
	then
		caching="--cache-from=type=local,src=$HOME/.cache/dockercache $caching"
	fi
fi

# TODO: pass in host UID and GID and Go cache paths to avoid using a buildkit
# caching layer.  This is particularly important in CI.
if docker help | grep -q podman
then
    docker build -t $tag -f ./_docker/Dockerfile ./_docker
else
    docker buildx build $caching -t $tag --load -f ./_docker/Dockerfile ./_docker
fi
